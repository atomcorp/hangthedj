{"version":3,"sources":["components/InPlay/InPlay.module.css","App.module.css","components/Start/Start.module.css","components/Scores/Scores.tsx","components/Start/Start.tsx","components/InPlay/InPlay.tsx","utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Scores","props","players","sort","a","b","score","map","player","i","key","avatar","name","Start","useState","setName","className","css","addnew","onSubmit","e","preventDefault","dispatch","type","payload","onChange","event","val","target","value","placeholder","onClick","defaultState","cards","deck","stage","currentPlayerId","currentCardId","getNextPlayerId","currentPlayerIndex","findIndex","id","length","reducer","state","action","immer","draft","Math","random","card","defaultPlayerId","filter","_","skipped","shift","push","InPlay","useReducer","useEffect","fetch","then","res","json","feed","entry","reduce","acc","gs$cell","parseInt","col","row","prompt","$t","category","currentPlayer","find","nextCard","appDispatch","data","FormData","result","playerid","choice","htmlFor","getId","toString","slice","getAvatar","avatars","floor","str","browserState","window","localStorage","getItem","JSON","parse","gameState","newState","forEach","setItem","stringify","App","header","toolbar","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b2286ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"choice\":\"InPlay_choice__1reU5\",\"prompt\":\"InPlay_prompt__1g_cl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3BlUL\",\"toolbar\":\"App_toolbar__1jzI0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addnew\":\"Start_addnew__2_Mwf\"};","import React from 'react';\n\nimport {playersType} from 'types';\n\nconst Scores = (props: propsTypes): JSX.Element => (\n  <table>\n    <thead>\n      <tr>\n        <th>Player</th>\n        <th>Score</th>\n      </tr>\n    </thead>\n    <tbody>\n      {[...props.players]\n        .sort((a, b) => (a.score < b.score ? 1 : -1))\n        .map((player, i) => (\n          <tr key={i}>\n            <td>\n              {player.avatar} {player.name}\n            </td>\n            <td>{player.score}</td>\n          </tr>\n        ))}\n    </tbody>\n  </table>\n);\n\ntype propsTypes = {\n  players: playersType;\n};\n\nexport default Scores;\n","import React, {useState} from 'react';\n\nimport Scores from 'components/Scores/Scores';\n\nimport {playersType, dispatchType} from 'types';\nimport css from './Start.module.css';\n\nconst Start = (props: propTypes): JSX.Element => {\n  const [name, setName] = useState('');\n  return (\n    <section>\n      <fieldset>\n        <legend>Add players</legend>\n        <form\n          className={css.addnew}\n          onSubmit={(e) => {\n            e.preventDefault();\n            setName('');\n            props.dispatch({\n              type: 'players/add',\n              payload: name,\n            });\n          }}\n        >\n          <input\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              const val = event.target.value;\n              if (val) {\n                setName(val);\n              }\n            }}\n            value={name}\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"Write name\"\n          />\n          <input type=\"submit\" value=\"Add\"></input>\n        </form>\n      </fieldset>\n\n      <section>\n        <Scores players={props.players} />\n      </section>\n      <br />\n      <section>\n        <button\n          onClick={() => {\n            props.dispatch({type: 'game/start'});\n          }}\n        >\n          Start\n        </button>\n      </section>\n    </section>\n  );\n};\n\ntype propTypes = {\n  players: playersType;\n  dispatch: dispatchType;\n};\n\nexport default Start;\n","import React, {useEffect, useReducer} from 'react';\nimport immer from 'immer';\n\nimport {\n  googleSheetsType,\n  cardsType,\n  playersType,\n  dispatchType,\n  roundType,\n} from 'types';\nimport css from './InPlay.module.css';\nimport Scores from 'components/Scores/Scores';\n\nconst defaultState = {\n  cards: [],\n  deck: [],\n  stage: 'waiting', // waiting or picking or empty\n  currentPlayerId: null,\n  currentCardId: null,\n};\n\nconst getNextPlayerId = (\n  currentPlayerId: string,\n  players: playersType\n): string => {\n  const currentPlayerIndex = players.findIndex(\n    (player) => player.id === currentPlayerId\n  );\n  if (currentPlayerIndex + 1 === players.length) {\n    return players[0].id;\n  }\n  return players[currentPlayerIndex + 1].id;\n};\n\nconst reducer = (state: stateType, action: actionType): stateType => {\n  return immer(state, (draft) => {\n    switch (action.type) {\n      case 'inplay/init':\n        draft.cards = action.payload.cards;\n        draft.deck = [...action.payload.cards]\n          .sort(() => Math.random() - 0.5)\n          .map((card) => card.id);\n        draft.currentPlayerId = action.payload.defaultPlayerId;\n        break;\n      case 'inplay/draw':\n        if (state.deck.length > 0) {\n          draft.stage = 'picking';\n          draft.currentCardId = state.deck[0];\n          draft.deck = draft.deck.filter((_, i) => i !== 0);\n        } else {\n          draft.stage = 'empty';\n        }\n        break;\n      case 'inplay/endround':\n        draft.stage = 'waiting';\n        draft.currentPlayerId = action.payload;\n        draft.currentCardId = null;\n        if (state.deck.length === 0) {\n          draft.stage = 'empty';\n        }\n        break;\n      case 'inplay/scoring':\n        draft.stage = 'scoring';\n        break;\n      case 'inplay/skip':\n        {\n          if (state.deck.length > 1) {\n            const skipped = draft.deck.shift();\n            if (skipped != null) {\n              draft.deck.push(skipped);\n              draft.currentCardId = draft.deck[0];\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nconst InPlay = (props: propsType): JSX.Element => {\n  const [state, dispatch] = useReducer(reducer, defaultState);\n  useEffect(() => {\n    fetch(\n      'https://spreadsheets.google.com/feeds/cells/1KwGMfgab2Mq0Zy8grS6fQLp8fqu9Qoikwb8qWg7OWqc/1/public/full?alt=json'\n    )\n      .then((res) => res.json())\n      .then((res: googleSheetsType) => {\n        const cards = res.feed.entry.reduce((acc: cardsType, {gs$cell}) => {\n          if (\n            parseInt(gs$cell.col, 10) === 1 &&\n            parseInt(gs$cell.row, 10) > 1\n          ) {\n            acc.push({\n              prompt: gs$cell.$t,\n              id: gs$cell.row,\n            });\n          } else if (\n            parseInt(gs$cell.col, 10) === 2 &&\n            parseInt(gs$cell.row, 10) > 1\n          ) {\n            acc[parseInt(gs$cell.row, 10) - 2].category = gs$cell.$t;\n          }\n          return acc;\n        }, []);\n        dispatch({\n          type: 'inplay/init',\n          payload: {cards: cards, defaultPlayerId: props.players[0].id},\n        });\n      });\n  }, [props.players[0].id]);\n  const currentPlayer = props.players.find(\n    (player) => player.id === state.currentPlayerId\n  );\n  const nextCard = state.cards.find((card) => card.id === state.currentCardId);\n  return (\n    <section>\n      {state.stage === 'waiting' && (\n        <div>\n          <Scores players={props.players} />\n          <p>\n            Pass the phone to{' '}\n            {currentPlayer\n              ? `${currentPlayer.avatar} ${currentPlayer.name}`\n              : `${props.players[0].avatar} ${props.players[0].name}`}\n          </p>\n          <br />\n          <button\n            onClick={() => {\n              dispatch({type: 'inplay/draw'});\n            }}\n          >\n            Ready\n          </button>\n        </div>\n      )}\n      {state.stage === 'empty' && (\n        <div>\n          <p>You have used all the cards</p>\n          <button\n            onClick={() => {\n              props.appDispatch({type: 'game/end'});\n            }}\n          >\n            Finish\n          </button>\n        </div>\n      )}\n      {state.stage === 'picking' && (\n        <div>\n          <p className={css.prompt}>\n            Play a song that fits the theme: <strong>{nextCard?.prompt}</strong>\n          </p>\n          {nextCard?.category != null && <p>(Hint: {nextCard.category})</p>}\n          {state.deck.length > 1 && (\n            <button\n              onClick={() => {\n                dispatch({type: 'inplay/skip'});\n              }}\n            >\n              Skip card\n            </button>\n          )}\n          <button\n            onClick={() => {\n              dispatch({type: 'inplay/scoring'});\n            }}\n          >\n            Done\n          </button>\n        </div>\n      )}\n      {state.stage === 'scoring' && (\n        <>\n          <p>Enter who got the correct answers</p>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              const target = e.target as HTMLFormElement;\n              const data = new FormData(target);\n              const result = [...data].reduce((acc, [, value]) => {\n                const playerid = value as string;\n                if (playerid === 'null') {\n                  return acc;\n                }\n                if (playerid in acc) {\n                  ++acc[playerid];\n                } else {\n                  acc[playerid] = 1;\n                }\n                return acc;\n              }, {} as roundType);\n              props.appDispatch({\n                type: 'game/scores',\n                payload: result,\n              });\n              if (state.currentPlayerId != null) {\n                dispatch({\n                  type: 'inplay/endround',\n                  payload: getNextPlayerId(\n                    state.currentPlayerId,\n                    props.players\n                  ),\n                });\n              }\n            }}\n          >\n            <label className={css.choice} htmlFor=\"name\">\n              Artist:{' '}\n              <select name=\"artist\">\n                <option value=\"null\">-</option>\n                {props.players.map((player, i) => (\n                  <option key={i} value={player.id}>\n                    {player.name}\n                  </option>\n                ))}\n              </select>\n            </label>\n            <label className={css.choice} htmlFor=\"song\">\n              Song:{' '}\n              <select name=\"song\">\n                <option value=\"null\">-</option>\n                {props.players.map((player, i) => (\n                  <option key={i} value={player.id}>\n                    {player.name}\n                  </option>\n                ))}\n              </select>\n            </label>\n            <label className={css.choice} htmlFor=\"category\">\n              Prompt:{' '}\n              <select name=\"category\">\n                <option value=\"null\">-</option>\n                {props.players.map((player, i) => (\n                  <option key={i} value={player.id}>\n                    {player.name}\n                  </option>\n                ))}\n              </select>\n            </label>\n            <button>Done</button>\n          </form>\n        </>\n      )}\n    </section>\n  );\n};\n\ntype propsType = {\n  players: playersType;\n  appDispatch: dispatchType;\n};\n\ntype stateType = {\n  cards: cardsType; // remaining cardIds\n  deck: string[];\n  stage: string;\n  currentPlayerId: null | string;\n  currentCardId: null | string;\n};\n\ntype actionType =\n  | {\n      type: 'inplay/init';\n      payload: {cards: cardsType; defaultPlayerId: string};\n    }\n  | {\n      type: 'inplay/draw';\n    }\n  | {\n      type: 'inplay/endround';\n      payload: string;\n    }\n  | {\n      type: 'inplay/skip';\n    }\n  | {\n      type: 'inplay/scoring';\n    };\n\nexport default InPlay;\n","export const getId = (): string => Math.random().toString(36).slice(-5);\n\nconst avatars = (): (() => string) => {\n  let avatars = [\n    '🐵',\n    '🐶',\n    '🦊',\n    '🦝',\n    '🐴',\n    '🦓',\n    '🐷',\n    '🐗',\n    '🦒',\n    '🐭',\n    '🐹',\n    '🐸',\n    '🐬',\n  ];\n  return (): string => {\n    const avatar = avatars[Math.floor(Math.random() * avatars.length)];\n    avatars = avatars.filter((str) => str !== avatar);\n    return avatar;\n  };\n};\nexport const getAvatar = avatars();\n","import React, {useReducer} from 'react';\nimport immer from 'immer';\n\nimport Start from 'components/Start/Start';\nimport InPlay from 'components/InPlay/InPlay';\nimport Scores from 'components/Scores/Scores';\nimport {getId, getAvatar} from 'utils';\n\nimport {stateType, actionTypes, gameStateType} from 'types';\nimport css from './App.module.css';\n\nconst browserState = window.localStorage.getItem('currentgame');\n\nconst defaultState =\n  browserState != null\n    ? JSON.parse(browserState)\n    : {\n        gameState: 'start' as gameStateType,\n        players: [\n          {\n            name: 'Tom',\n            score: 0,\n            id: getId(),\n            avatar: getAvatar(),\n          },\n          {\n            name: 'Amy',\n            score: 0,\n            id: getId(),\n            avatar: getAvatar(),\n          },\n        ],\n      };\n\nconst reducer = (state: stateType, action: actionTypes): stateType => {\n  const newState = immer(state, (draft) => {\n    switch (action.type) {\n      case 'players/add':\n        draft.players.push({\n          name: action.payload,\n          score: 0,\n          id: getId(),\n          avatar: getAvatar(),\n        });\n        break;\n      case 'game/start':\n        draft.gameState = 'inplay';\n        break;\n      case 'game/scores':\n        draft.players.forEach((player) => {\n          if (player.id in action.payload) {\n            player.score += action.payload[player.id];\n          }\n        });\n        break;\n      case 'game/end':\n        draft.gameState = 'finished';\n        break;\n      case 'game/restart':\n        return defaultState;\n      default:\n        break;\n    }\n  });\n  localStorage.setItem('currentgame', JSON.stringify(newState));\n  return newState;\n};\n\nfunction App(): JSX.Element {\n  const [state, dispatch] = useReducer(reducer, defaultState);\n  return (\n    <div>\n      <section className={css.header}>\n        <h1>DJ Game</h1>\n        <div className={css.toolbar}>\n          {state.gameState !== 'start' && (\n            <button\n              onClick={() => {\n                dispatch({type: 'game/end'});\n              }}\n            >\n              Finish\n            </button>\n          )}\n        </div>\n      </section>\n      {state.gameState === 'start' && (\n        <Start players={state.players} dispatch={dispatch} />\n      )}\n      {state.gameState === 'inplay' && (\n        <InPlay players={state.players} appDispatch={dispatch} />\n      )}\n      {state.gameState === 'finished' && (\n        <section>\n          <Scores players={state.players} />\n          <button\n            onClick={() => {\n              dispatch({type: 'game/restart'});\n            }}\n          >\n            Restart\n          </button>\n        </section>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}