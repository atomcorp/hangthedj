{"version":3,"sources":["components/InPlay/InPlay.module.css","App.module.css","components/Start/Start.module.css","components/Scores/Scores.tsx","utils.ts","components/Start/Start.tsx","spotifyInterface.tsx","components/Search/Search.tsx","components/Picker/Picker.tsx","components/InPlay/InPlay.tsx","components/Player/Player.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Scores","props","players","sort","a","b","score","map","player","i","key","avatar","name","avatarsList","avatarUtils","avatars","get","randomIndex","Math","floor","random","length","filter","str","reset","Start","useState","setName","className","css","addnew","onSubmit","e","preventDefault","dispatch","type","payload","id","toString","slice","onChange","event","val","target","value","placeholder","onClick","token","playerRef","play","pause","resume","isPlaying","setIsPlayingListener","callback","isPlayingListener","hasPickedTrack","togglePickedTrack","window","onSpotifyWebPlaybackSDKReady","Spotify","location","hash","split","forEach","param","includes","Player","getOAuthToken","cb","spotify_uri","playerInstance","_options","playCallback","access_token","fetch","method","body","JSON","stringify","uris","headers","Authorization","then","res","console","log","addListener","message","error","state","paused","track_window","current_track","artists","device_id","connect","initialState","searchTerm","playlists","tracks","view","playlistResults","artistResults","isDirty","reducer","action","immer","draft","Tracks","style","maxHeight","overflow","track","handlePick","artist","Search","useReducer","display","encodeURIComponent","json","spotifyResults","items","splice","playlist","catch","width","size","item","Picker","defaultState","cards","deck","stage","currentPlayerId","currentCardId","hasPicked","rounds","round","getNextPlayerId","currentPlayerIndex","findIndex","card","defaultPlayerId","_","nextPlayerId","isEndOfRound","skipped","shift","push","InPlay","useEffect","feed","entry","reduce","acc","gs$cell","parseInt","col","row","prompt","$t","category","currentPlayer","find","nextCard","flex","appDispatch","disabled","data","FormData","result","playerid","choice","htmlFor","setIsPlaying","nowPlaying","setNowPlaying","bool","browserState","localStorage","getItem","parse","gameState","newState","setItem","App","tempPlayerToken","setTempPlayerToken","minHeight","header","toolbar","clear","href","host","rel","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd4a8ac8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"choice\":\"InPlay_choice__1reU5\",\"prompt\":\"InPlay_prompt__1g_cl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3BlUL\",\"toolbar\":\"App_toolbar__1jzI0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addnew\":\"Start_addnew__2_Mwf\"};","import React from 'react';\n\nimport {playersType} from 'types';\n\nconst Scores = (props: propsTypes): JSX.Element => (\n  <table>\n    <thead>\n      <tr>\n        <th>Player</th>\n        <th>Score</th>\n      </tr>\n    </thead>\n    <tbody>\n      {[...props.players]\n        .sort((a, b) => (a.score < b.score ? 1 : -1))\n        .map((player, i) => (\n          <tr key={i}>\n            <td>\n              {player.avatar} {player.name}\n            </td>\n            <td>{player.score}</td>\n          </tr>\n        ))}\n    </tbody>\n  </table>\n);\n\ntype propsTypes = {\n  players: playersType;\n};\n\nexport default Scores;\n","export const getId = (): string => Math.random().toString(36).slice(-5);\n\ntype avatarsType = {\n  get: () => string;\n  reset: () => void;\n};\nconst avatarsList = [\n  '🐵',\n  '🐶',\n  '🦊',\n  '🦝',\n  '🐴',\n  '🦓',\n  '🐷',\n  '🐗',\n  '🦒',\n  '🐭',\n  '🐹',\n  '🐸',\n  '🐬',\n];\nconst avatars = (): avatarsType => {\n  let avatars = avatarsList;\n  return {\n    get: (): string => {\n      const randomIndex = Math.floor(Math.random() * avatars.length);\n      const avatar = avatars[randomIndex];\n      avatars = avatars.filter((str) => str !== avatar);\n      return avatar;\n    },\n    reset: (): void => {\n      avatars = avatarsList;\n    },\n  };\n};\nexport const avatarUtils = avatars();\n","import React, {useState} from 'react';\n\nimport Scores from 'components/Scores/Scores';\nimport {getId, avatarUtils} from 'utils';\n\nimport {playersType, dispatchType} from 'types';\nimport css from './Start.module.css';\n\nconst Start = (props: propTypes): JSX.Element => {\n  const [name, setName] = useState('');\n  return (\n    <section>\n      <fieldset>\n        <legend>Add players</legend>\n        <form\n          className={css.addnew}\n          onSubmit={(e) => {\n            e.preventDefault();\n            setName('');\n            props.dispatch({\n              type: 'players/add',\n              payload: {\n                name,\n                id: getId(),\n                avatar: avatarUtils.get(),\n              },\n            });\n          }}\n        >\n          <input\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              const val = event.target.value;\n              if (val) {\n                setName(val);\n              }\n            }}\n            value={name}\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"Write name\"\n          />\n          <button>Add</button>\n        </form>\n      </fieldset>\n\n      <section>\n        <Scores players={props.players} />\n      </section>\n      <br />\n      <section>\n        <button\n          onClick={() => {\n            props.dispatch({type: 'game/start'});\n          }}\n        >\n          Start\n        </button>\n      </section>\n    </section>\n  );\n};\n\ntype propTypes = {\n  players: playersType;\n  dispatch: dispatchType;\n};\n\nexport default Start;\n","import {playerRefType, SpotifyOptionsType} from 'types';\r\n\r\nlet token: string | null = null;\r\n\r\nconst setToken = (): void => {\r\n  if (window.location.hash && window.location.hash[0] === '#') {\r\n    const params = window.location.hash.slice(1).split('&');\r\n    params.forEach((param) => {\r\n      if (param.includes('access_token')) {\r\n        token = param.split('=')[1];\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\ntype playerType = {\r\n  spotify_uri: string;\r\n  playerInstance: Spotify.SpotifyPlayer & SpotifyOptionsType;\r\n  playCallback: () => void;\r\n};\r\n\r\nconst play = ({\r\n  spotify_uri,\r\n  playerInstance: {\r\n    _options: {getOAuthToken, id},\r\n  },\r\n  playCallback,\r\n}: playerType): void => {\r\n  getOAuthToken((access_token: string) => {\r\n    fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify({uris: [spotify_uri]}),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${access_token}`,\r\n      },\r\n    }).then((res) => {\r\n      console.log('playing');\r\n      playCallback();\r\n    });\r\n  });\r\n};\r\n\r\nconst playerRef: playerRefType = {\r\n  player: null,\r\n  token: token,\r\n  play: () => null,\r\n  pause: () => null,\r\n  resume: () => null,\r\n  isPlaying: false,\r\n  setIsPlayingListener: (callback) => {\r\n    playerRef.isPlayingListener = callback;\r\n  },\r\n  isPlayingListener: null,\r\n  hasPickedTrack: false,\r\n  togglePickedTrack: () => {\r\n    playerRef.hasPickedTrack = !playerRef.hasPickedTrack;\r\n  },\r\n};\r\n\r\nwindow.onSpotifyWebPlaybackSDKReady = () => {\r\n  const Spotify = window.Spotify;\r\n  setToken();\r\n  // You can now initialize Spotify.Player and use the SDK\r\n  const player = new Spotify.Player({\r\n    name: 'Web Playback SDK Quick Start Player',\r\n    getOAuthToken: (cb) => {\r\n      if (token) {\r\n        cb(token);\r\n      }\r\n    },\r\n  }) as Spotify.SpotifyPlayer & SpotifyOptionsType;\r\n  // assign properties to the interface\r\n  playerRef.player = player;\r\n  playerRef.token = token;\r\n  playerRef.play = (spotify_uri: string) => {\r\n    play({\r\n      playerInstance: player,\r\n      spotify_uri: `spotify:track:${spotify_uri}`,\r\n      playCallback: () => {},\r\n    });\r\n  };\r\n  playerRef.pause = () => {\r\n    player.pause().then(() => {});\r\n  };\r\n  playerRef.resume = () => {\r\n    player.resume().then(() => {});\r\n  };\r\n  // Error handling\r\n  player.addListener('initialization_error', ({message}) => {\r\n    console.error(message);\r\n  });\r\n  player.addListener('authentication_error', ({message}) => {\r\n    console.error(message);\r\n  });\r\n  player.addListener('account_error', ({message}) => {\r\n    console.error(message);\r\n  });\r\n  player.addListener('playback_error', ({message}) => {\r\n    console.error(message);\r\n  });\r\n  // Playback status updates\r\n  player.addListener('player_state_changed', (state) => {\r\n    console.log(state);\r\n    if (playerRef.isPlayingListener != null) {\r\n      playerRef.isPlayingListener(\r\n        !state.paused,\r\n        `${state.track_window.current_track.artists[0].name} - ${state.track_window.current_track.name}`\r\n      );\r\n    }\r\n  });\r\n  // Ready\r\n  player.addListener('ready', ({device_id}) => {\r\n    console.log(device_id);\r\n  });\r\n  // Not Ready\r\n  // player.addListener('not_ready', ({device_id}) => {\r\n  //   console.log('Device ID has gone offline', device_id);\r\n  // });\r\n  // Connect to the player!\r\n  player.connect();\r\n  return {\r\n    player,\r\n  };\r\n};\r\n\r\nexport default playerRef;\r\n","import React, {useReducer} from 'react';\r\nimport immer from 'immer';\r\n\r\nimport player from 'spotifyInterface';\r\n\r\nconst initialState = {\r\n  searchTerm: '',\r\n  playlists: [],\r\n  artists: [],\r\n  tracks: [],\r\n  view: 'search',\r\n  playlistResults: null,\r\n  artistResults: null,\r\n  isDirty: false,\r\n};\r\n\r\nconst reducer = (state: stateType, action: actionTypes): stateType => {\r\n  return immer(state, (draft) => {\r\n    switch (action.type) {\r\n      case 'search/set':\r\n        draft.searchTerm = action.payload;\r\n        break;\r\n      case 'search/results':\r\n        draft.playlists = action.payload.playlists;\r\n        draft.artists = action.payload.artists;\r\n        draft.tracks = action.payload.tracks;\r\n        draft.isDirty = true;\r\n        break;\r\n      case 'playlist/set':\r\n        draft.playlistResults = action.payload;\r\n        draft.view = 'playlist';\r\n        break;\r\n      case 'view/reset':\r\n        draft.view = 'search';\r\n        draft.playlistResults = null;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\ntype TracksProps = {\r\n  tracks: trackType[] | undefined;\r\n  handlePick: () => void;\r\n};\r\n\r\nconst Tracks = (props: TracksProps): JSX.Element => (\r\n  <div style={{maxHeight: '300px', overflow: 'auto'}}>\r\n    <table>\r\n      <tbody>\r\n        {props.tracks?.map((track, i) => (\r\n          <tr\r\n            key={track.id}\r\n            onClick={() => {\r\n              player.play(track.id);\r\n              props.handlePick();\r\n            }}\r\n          >\r\n            <td>\r\n              <strong>\r\n                {track.artists.map((artist, i) =>\r\n                  i === 0 ? (\r\n                    <span key={i}>{artist.name}</span>\r\n                  ) : (\r\n                    <span key={i}>, {artist.name}</span>\r\n                  )\r\n                )}\r\n              </strong>{' '}\r\n              - {track.name}\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n);\r\n\r\nconst Search = (props: propsType): JSX.Element => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <section>\r\n      {state.view === 'playlist' && (\r\n        <section>\r\n          <div\r\n            onClick={() => {\r\n              dispatch({type: 'view/reset'});\r\n            }}\r\n          >\r\n            ← {state.playlistResults?.name}\r\n          </div>\r\n          <br />\r\n          <Tracks\r\n            tracks={state.playlistResults?.tracks}\r\n            handlePick={props.handlePick}\r\n          />\r\n        </section>\r\n      )}\r\n      {state.view === 'search' && (\r\n        <form\r\n          style={{display: 'flex'}}\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            if (player.token != null) {\r\n              fetch(\r\n                `https://api.spotify.com/v1/search?q=${encodeURIComponent(\r\n                  state.searchTerm\r\n                )}&type=album,track,playlist,artist&limit=10`,\r\n                {\r\n                  headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${player.token}`,\r\n                  },\r\n                }\r\n              )\r\n                .then((res) => res.json())\r\n                .then((res) => {\r\n                  const spotifyResults = res as spotifyResultsType;\r\n                  dispatch({\r\n                    type: 'search/results',\r\n                    payload: {\r\n                      playlists: spotifyResults.playlists.items\r\n                        .splice(0, 10)\r\n                        .map((playlist) => ({\r\n                          id: playlist.id,\r\n                          name: playlist.name,\r\n                        })),\r\n                      artists: spotifyResults.artists.items\r\n                        .splice(0, 3)\r\n                        .map((artist) => ({\r\n                          id: artist.id,\r\n                          name: artist.name,\r\n                        })),\r\n                      tracks: spotifyResults.tracks.items.map((track) => ({\r\n                        id: track.id,\r\n                        name: track.name,\r\n                        artists: track.artists.map((artist) => ({\r\n                          name: artist.name,\r\n                          id: artist.id,\r\n                        })),\r\n                      })),\r\n                    },\r\n                  });\r\n                })\r\n                .catch((res) => {\r\n                  console.error(res);\r\n                });\r\n            }\r\n          }}\r\n        >\r\n          <input\r\n            style={{width: '100%'}}\r\n            size={10}\r\n            value={state.searchTerm}\r\n            onChange={(e) => {\r\n              if (e.target != null) {\r\n                dispatch({type: 'search/set', payload: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n          <button>Search</button>\r\n        </form>\r\n      )}\r\n      {state.view === 'search' && state.isDirty && (\r\n        <section>\r\n          <div>\r\n            <h3>Tracks:</h3>\r\n            <Tracks tracks={state.tracks} handlePick={props.handlePick} />\r\n            {state.tracks.length === 0 && 'No tracks'}\r\n          </div>\r\n          <div>\r\n            <h3>Playlists:</h3>\r\n            <table>\r\n              <tbody>\r\n                {state.playlists.map((playlist, i) => (\r\n                  <tr\r\n                    onClick={() => {\r\n                      fetch(\r\n                        `https://api.spotify.com/v1/playlists/${playlist.id}`,\r\n                        {\r\n                          headers: {\r\n                            'Content-Type': 'application/json',\r\n                            Authorization: `Bearer ${player.token}`,\r\n                          },\r\n                        }\r\n                      )\r\n                        .then((res) => res.json())\r\n                        .then((res) => {\r\n                          const playlistResults = res as playlistResultsType;\r\n                          dispatch({\r\n                            type: 'playlist/set',\r\n                            payload: {\r\n                              name: playlistResults.name,\r\n                              tracks: playlistResults.tracks.items.map(\r\n                                (item) => ({\r\n                                  id: item.track.id,\r\n                                  name: item.track.name,\r\n                                  artists: item.track.artists.map((artist) => ({\r\n                                    name: artist.name,\r\n                                    id: artist.id,\r\n                                  })),\r\n                                })\r\n                              ),\r\n                            },\r\n                          });\r\n                        });\r\n                    }}\r\n                    key={i}\r\n                  >\r\n                    <td>{playlist.name} →</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n\r\n            {state.playlists.length === 0 && 'No playlists'}\r\n          </div>\r\n          {/* <div>\r\n            <div>Artists:</div>\r\n            <ul>\r\n              {state.artists.map((artist, i) => (\r\n                <li key={i}>{artist.name}</li>\r\n              ))}\r\n            </ul>\r\n            {state.artists.length === 0 && 'No artists'}\r\n          </div> */}\r\n        </section>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\ntype playlistType = {\r\n  name: string;\r\n  id: string;\r\n};\r\n\r\ntype artistType = {\r\n  name: string;\r\n  id: string;\r\n};\r\n\r\ntype trackType = {\r\n  name: string;\r\n  id: string;\r\n  artists: artistType[];\r\n};\r\n\r\ntype stateType = {\r\n  searchTerm: string;\r\n  playlists: playlistType[];\r\n  artists: artistType[];\r\n  tracks: trackType[];\r\n  view: string; // 'search' | 'playlist' | 'artist';\r\n  playlistResults: null | {\r\n    tracks: trackType[];\r\n    name: string;\r\n  };\r\n  artistResults: null | {\r\n    tracks: trackType[];\r\n    name: string;\r\n  };\r\n  isDirty: boolean;\r\n};\r\n\r\ntype actionTypes =\r\n  | {\r\n      type: 'search/set';\r\n      payload: string;\r\n    }\r\n  | {\r\n      type: 'search/results';\r\n      payload: {\r\n        playlists: playlistType[];\r\n        artists: artistType[];\r\n        tracks: trackType[];\r\n      };\r\n    }\r\n  | {\r\n      type: 'playlist/set';\r\n      payload: {\r\n        tracks: trackType[];\r\n        name: string;\r\n      };\r\n    }\r\n  | {\r\n      type: 'artist/set';\r\n      payload: {\r\n        tracks: trackType[];\r\n        name: string;\r\n      };\r\n    }\r\n  | {\r\n      type: 'view/reset';\r\n    };\r\n\r\ntype spotifyResultsType = {\r\n  playlists: {\r\n    items: {\r\n      name: string;\r\n      id: string;\r\n    }[];\r\n  };\r\n  artists: {\r\n    items: {\r\n      name: string;\r\n      id: string;\r\n    }[];\r\n  };\r\n  tracks: {\r\n    items: {\r\n      name: string;\r\n      id: string;\r\n      artists: {name: string; id: string}[];\r\n    }[];\r\n  };\r\n};\r\n\r\ntype playlistResultsType = {\r\n  name: string;\r\n  tracks: {\r\n    items: {\r\n      track: {\r\n        name: string;\r\n        id: string;\r\n        artists: {name: string; id: string}[];\r\n      };\r\n    }[];\r\n  };\r\n};\r\n\r\ntype propsType = {\r\n  handlePick: () => void;\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport Search from 'components/Search/Search';\r\n\r\nconst Picker = (props: propsType): JSX.Element => {\r\n  return (\r\n    <section>\r\n      <Search handlePick={props.handlePick} />\r\n    </section>\r\n  );\r\n};\r\n\r\ntype propsType = {\r\n  handlePick: () => void;\r\n};\r\n\r\nexport default Picker;\r\n","import React, {useEffect, useReducer} from 'react';\r\nimport immer from 'immer';\r\n\r\nimport {\r\n  googleSheetsType,\r\n  cardsType,\r\n  playersType,\r\n  dispatchType,\r\n  roundType,\r\n} from 'types';\r\nimport css from './InPlay.module.css';\r\nimport Scores from 'components/Scores/Scores';\r\nimport Picker from 'components/Picker/Picker';\r\n\r\nconst defaultState: stateType = {\r\n  cards: [],\r\n  deck: [],\r\n  stage: 'waiting', // waiting or picking or empty\r\n  currentPlayerId: null,\r\n  currentCardId: null,\r\n  hasPicked: false,\r\n  rounds: 3,\r\n  round: 1,\r\n};\r\n\r\nconst getNextPlayerId = (\r\n  currentPlayerId: string,\r\n  players: playersType\r\n): string => {\r\n  const currentPlayerIndex = players.findIndex(\r\n    (player) => player.id === currentPlayerId\r\n  );\r\n  if (currentPlayerIndex + 1 === players.length) {\r\n    return players[0].id;\r\n  }\r\n  return players[currentPlayerIndex + 1].id;\r\n};\r\n\r\nconst reducer = (state: stateType, action: actionType): stateType => {\r\n  return immer(state, (draft) => {\r\n    switch (action.type) {\r\n      case 'inplay/init':\r\n        draft.cards = action.payload.cards;\r\n        draft.deck = [...action.payload.cards]\r\n          .sort(() => Math.random() - 0.5)\r\n          .map((card) => card.id);\r\n        draft.currentPlayerId = action.payload.defaultPlayerId;\r\n        break;\r\n      case 'inplay/draw':\r\n        if (state.deck.length > 0) {\r\n          draft.stage = 'picking';\r\n          draft.currentCardId = state.deck[0];\r\n          draft.deck = draft.deck.filter((_, i) => i !== 0);\r\n        } else {\r\n          draft.stage = 'empty';\r\n        }\r\n        break;\r\n      case 'inplay/endturn':\r\n        draft.stage = 'waiting';\r\n        draft.currentPlayerId = action.payload.nextPlayerId;\r\n        draft.currentCardId = null;\r\n        draft.hasPicked = false;\r\n        if (action.payload.isEndOfRound) {\r\n          if (draft.round === state.rounds) {\r\n            draft.stage = 'ended';\r\n          } else {\r\n            draft.round += 1;\r\n          }\r\n        }\r\n        if (state.deck.length === 0) {\r\n          draft.stage = 'empty';\r\n        }\r\n\r\n        break;\r\n      case 'inplay/scoring':\r\n        draft.stage = 'scoring';\r\n        break;\r\n      case 'inplay/skip':\r\n        if (state.deck.length > 1) {\r\n          const skipped = draft.deck.shift();\r\n          if (skipped != null) {\r\n            draft.deck.push(skipped);\r\n            draft.currentCardId = draft.deck[0];\r\n          }\r\n        }\r\n        break;\r\n      case 'inplay/pickedsong':\r\n        draft.hasPicked = true;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nconst InPlay = (props: propsType): JSX.Element => {\r\n  const [state, dispatch] = useReducer(reducer, defaultState);\r\n  const defaultPlayerId = props.players[0].id;\r\n  useEffect(() => {\r\n    fetch(\r\n      'https://spreadsheets.google.com/feeds/cells/1KwGMfgab2Mq0Zy8grS6fQLp8fqu9Qoikwb8qWg7OWqc/1/public/full?alt=json'\r\n    )\r\n      .then((res) => res.json())\r\n      .then((res: googleSheetsType) => {\r\n        const cards = res.feed.entry.reduce((acc: cardsType, {gs$cell}) => {\r\n          if (\r\n            parseInt(gs$cell.col, 10) === 1 &&\r\n            parseInt(gs$cell.row, 10) > 1\r\n          ) {\r\n            acc.push({\r\n              prompt: gs$cell.$t,\r\n              id: gs$cell.row,\r\n            });\r\n          } else if (\r\n            parseInt(gs$cell.col, 10) === 2 &&\r\n            parseInt(gs$cell.row, 10) > 1\r\n          ) {\r\n            acc[parseInt(gs$cell.row, 10) - 2].category = gs$cell.$t;\r\n          }\r\n          return acc;\r\n        }, []);\r\n        dispatch({\r\n          type: 'inplay/init',\r\n          payload: {cards: cards, defaultPlayerId},\r\n        });\r\n      });\r\n  }, [defaultPlayerId]);\r\n  const currentPlayer = props.players.find(\r\n    (player) => player.id === state.currentPlayerId\r\n  );\r\n  const nextCard = state.cards.find((card) => card.id === state.currentCardId);\r\n  return (\r\n    <section style={{flex: '1 0 auto'}}>\r\n      <div>\r\n        Round: {state.round}/{state.rounds}\r\n      </div>\r\n      <br />\r\n      {state.stage === 'waiting' && (\r\n        <div>\r\n          <Scores players={props.players} />\r\n          <p>\r\n            Pass the phone to{' '}\r\n            {currentPlayer\r\n              ? `${currentPlayer.avatar} ${currentPlayer.name}`\r\n              : `${props.players[0].avatar} ${props.players[0].name}`}\r\n          </p>\r\n          <br />\r\n\r\n          <button\r\n            onClick={() => {\r\n              dispatch({type: 'inplay/draw'});\r\n            }}\r\n          >\r\n            Ready\r\n          </button>\r\n        </div>\r\n      )}\r\n      {state.stage === 'empty' && (\r\n        <div>\r\n          <p>You have used all the cards</p>\r\n          <br />\r\n\r\n          <button\r\n            onClick={() => {\r\n              props.appDispatch({type: 'game/end'});\r\n            }}\r\n          >\r\n            Finish\r\n          </button>\r\n        </div>\r\n      )}\r\n      {state.stage === 'ended' && (\r\n        <div>\r\n          <p>You have finished the game. Click to reveal the scores!</p>\r\n          <br />\r\n\r\n          <button\r\n            onClick={() => {\r\n              props.appDispatch({type: 'game/end'});\r\n            }}\r\n          >\r\n            Finish\r\n          </button>\r\n        </div>\r\n      )}\r\n      {state.stage === 'picking' && (\r\n        <div>\r\n          <p className={css.prompt}>\r\n            Play a song that fits the theme: <strong>{nextCard?.prompt}</strong>\r\n          </p>\r\n          <Picker\r\n            handlePick={() => {\r\n              dispatch({type: 'inplay/pickedsong'});\r\n            }}\r\n          />\r\n          {nextCard?.category != null && <p>(Hint: {nextCard.category})</p>}\r\n          <br />\r\n\r\n          {state.deck.length > 1 && (\r\n            <button\r\n              onClick={() => {\r\n                dispatch({type: 'inplay/skip'});\r\n              }}\r\n            >\r\n              Skip card\r\n            </button>\r\n          )}\r\n          <button\r\n            disabled={!state.hasPicked}\r\n            onClick={() => {\r\n              dispatch({type: 'inplay/scoring'});\r\n            }}\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n      )}\r\n      {state.stage === 'scoring' && (\r\n        <>\r\n          <p>Enter who got the correct answers</p>\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              const target = e.target as HTMLFormElement;\r\n              const data = new FormData(target);\r\n              const result = [...data].reduce((acc, [, value]) => {\r\n                const playerid = value as string;\r\n                if (playerid === 'null') {\r\n                  return acc;\r\n                }\r\n                if (playerid in acc) {\r\n                  ++acc[playerid];\r\n                } else {\r\n                  acc[playerid] = 1;\r\n                }\r\n                return acc;\r\n              }, {} as roundType);\r\n              props.appDispatch({\r\n                type: 'game/scores',\r\n                payload: result,\r\n              });\r\n              if (state.currentPlayerId != null) {\r\n                dispatch({\r\n                  type: 'inplay/endturn',\r\n                  payload: {\r\n                    nextPlayerId: getNextPlayerId(\r\n                      state.currentPlayerId,\r\n                      props.players\r\n                    ),\r\n                    isEndOfRound:\r\n                      props.players.findIndex(\r\n                        (player) => player.id === state.currentPlayerId\r\n                      ) ===\r\n                      props.players.length - 1,\r\n                  },\r\n                });\r\n              }\r\n            }}\r\n          >\r\n            <label className={css.choice} htmlFor=\"name\">\r\n              Artist:{' '}\r\n              <select name=\"artist\">\r\n                <option value=\"null\">-</option>\r\n                {props.players.map((player, i) => (\r\n                  <option key={i} value={player.id}>\r\n                    {player.avatar} {player.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n            <label className={css.choice} htmlFor=\"song\">\r\n              Song:{' '}\r\n              <select name=\"song\">\r\n                <option value=\"null\">-</option>\r\n                {props.players.map((player, i) => (\r\n                  <option key={i} value={player.id}>\r\n                    {player.avatar} {player.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n            <label className={css.choice} htmlFor=\"category\">\r\n              Prompt:{' '}\r\n              <select name=\"category\">\r\n                <option value=\"null\">-</option>\r\n                {props.players.map((player, i) => (\r\n                  <option key={i} value={player.id}>\r\n                    {player.avatar} {player.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n            <br />\r\n\r\n            <button>Done</button>\r\n          </form>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\ntype propsType = {\r\n  players: playersType;\r\n  appDispatch: dispatchType;\r\n};\r\n\r\ntype stateType = {\r\n  cards: cardsType; // remaining cardIds\r\n  deck: string[];\r\n  stage: 'waiting' | 'picking' | 'empty' | 'scoring' | 'ended';\r\n  currentPlayerId: null | string;\r\n  currentCardId: null | string;\r\n  hasPicked: boolean;\r\n  rounds: number;\r\n  round: number;\r\n};\r\n\r\ntype actionType =\r\n  | {\r\n      type: 'inplay/init';\r\n      payload: {cards: cardsType; defaultPlayerId: string};\r\n    }\r\n  | {\r\n      type: 'inplay/draw';\r\n    }\r\n  | {\r\n      type: 'inplay/endturn';\r\n      payload: {\r\n        nextPlayerId: string;\r\n        isEndOfRound: boolean;\r\n      };\r\n    }\r\n  | {\r\n      type: 'inplay/skip';\r\n    }\r\n  | {\r\n      type: 'inplay/scoring';\r\n    }\r\n  | {\r\n      type: 'inplay/pickedsong';\r\n    };\r\n\r\nexport default InPlay;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport player from 'spotifyInterface';\r\n\r\nconst Player = (): JSX.Element => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [nowPlaying, setNowPlaying] = useState('');\r\n  useEffect(() => {\r\n    if (player.setIsPlayingListener != null) {\r\n      player.setIsPlayingListener((bool: boolean, track: string | null) => {\r\n        setIsPlaying(bool);\r\n        setNowPlaying(track ?? '');\r\n      });\r\n    }\r\n  }, []);\r\n  return (\r\n    <section>\r\n      {nowPlaying}{' '}\r\n      {isPlaying ? (\r\n        <button\r\n          onClick={() => {\r\n            player.pause();\r\n          }}\r\n        >\r\n          &#9208;\r\n        </button>\r\n      ) : (\r\n        <button\r\n          onClick={() => {\r\n            player.resume();\r\n          }}\r\n        >\r\n          ▶\r\n        </button>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","/// <reference types=\"spotify-web-playback-sdk\" />\nimport React, {useReducer, useState} from 'react';\nimport immer from 'immer';\n\nimport Start from 'components/Start/Start';\nimport InPlay from 'components/InPlay/InPlay';\nimport Scores from 'components/Scores/Scores';\nimport {avatarUtils} from 'utils';\nimport player from 'spotifyInterface';\nimport Player from 'components/Player/Player';\n\nimport {stateType, actionTypes, gameStateType} from 'types';\nimport css from './App.module.css';\n\nconst browserState = localStorage.getItem('currentgame');\n\nconst defaultState = (): stateType => ({\n  gameState: 'start' as gameStateType,\n  players: [],\n});\n\nconst initialState =\n  browserState != null ? JSON.parse(browserState) : defaultState();\n\nconst reducer = (state: stateType, action: actionTypes): stateType => {\n  const newState = immer(state, (draft) => {\n    switch (action.type) {\n      case 'players/add':\n        draft.players.push({\n          name: action.payload.name,\n          score: 0,\n          id: action.payload.id,\n          avatar: action.payload.avatar,\n        });\n        break;\n      case 'game/start':\n        draft.gameState = 'inplay';\n        break;\n      case 'game/scores':\n        draft.players.forEach((player) => {\n          if (player.id in action.payload) {\n            player.score += action.payload[player.id];\n          }\n        });\n        break;\n      case 'game/end':\n        draft.gameState = 'finished';\n        break;\n      case 'game/restart':\n        return action.payload;\n      default:\n        break;\n    }\n  });\n  localStorage.setItem('currentgame', JSON.stringify(newState));\n  return newState;\n};\n\nfunction App(): JSX.Element {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [tempPlayerToken, setTempPlayerToken] = useState(player.token);\n  return (\n    <div>\n      <section style={{minHeight: '100vh'}}>\n        <section className={css.header}>\n          <h1>Pass the AUX</h1>\n          <div className={css.toolbar}>\n            <Player />\n          </div>\n        </section>\n        <hr />\n        {state.gameState === 'start' && (\n          <Start players={state.players} dispatch={dispatch} />\n        )}\n        {state.gameState === 'inplay' && (\n          <InPlay players={state.players} appDispatch={dispatch} />\n        )}\n        {state.gameState === 'finished' && (\n          <section>\n            <Scores players={state.players} />\n            <button\n              onClick={() => {\n                avatarUtils.reset();\n                localStorage.clear();\n                dispatch({type: 'game/restart', payload: defaultState()});\n              }}\n            >\n              Restart\n            </button>\n          </section>\n        )}\n      </section>\n      <br />\n      <br />\n      <br />\n      <br />\n      <details>\n        <summary>Debug</summary>\n        <pre>\n          <code>\n            Debug:\n            {player.token != null ? 'Logged in' : 'Logged out'}\n            <br />\n            token: {tempPlayerToken}\n            <br />\n            <a\n              href={`https://accounts.spotify.com/authorize?client_id=5280f2bd9b014405839ea087c05c58d1&response_type=token&redirect_uri=${encodeURIComponent(\n                window.location.host === 'localhost:3000'\n                  ? 'http://localhost:3000/callback'\n                  : 'https://atomcorp.github.io/hangthedj/'\n              )}&scope=${encodeURIComponent(\n                'streaming user-read-email user-read-private user-modify-playback-state'\n              )}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Authenticate\n            </a>\n            <br />\n            <button\n              type=\"button\"\n              onClick={() => {\n                if (player.token !== tempPlayerToken) {\n                  setTempPlayerToken(player.token);\n                }\n              }}\n            >\n              Re-auth\n            </button>\n            {state.gameState !== 'start' && state.gameState !== 'finished' && (\n              <button\n                onClick={() => {\n                  dispatch({type: 'game/end'});\n                }}\n              >\n                Finish\n              </button>\n            )}\n          </code>\n        </pre>\n      </details>\n    </div>\n  );\n}\n\ntype propsType = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}